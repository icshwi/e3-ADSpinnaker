require ADSpinnaker,2.0.0
require busy,1.7.2

#require autosave,5.9.0+
#require iocStats,3.1.16

epicsEnvSet("CAMERA_ID", "19299225")
epicsEnvSet("AREA", "labs-utg-test")
epicsEnvSet("DEVICE", "cam")

epicsEnvSet("PREFIX_PV", "$(AREA):$(DEVICE):")
epicsEnvSet("IOCNAME", "$(AREA)-$(DEVICE)")
epicsEnvSet("CAM", "")
epicsEnvSet("IMAGE", "image1:")

epicsEnvSet("IOC", "iocSpinnaker")
epicsEnvSet("TOP", ".")
epicsEnvSet("AS_TOP", "/epics/autosave")

epicsEnvSet("ADSPINNAKER", "/home/flir/e3/e3-ADSpinnaker/")
epicsEnvSet("ADCORE",      "/home/flir/e3/e3-ADCore/ADCore")
epicsEnvSet("AUTOSAVE", "")

epicsEnvSet("EPICS_CA_MAX_ARRAY_BYTES","64000000")

### The port name for the detector
epicsEnvSet("PORT",   "PG")

### Really large queue so we can stream to disk at full camera speed
epicsEnvSet("QSIZE",  "2000")   

### The maximim image width; used for row profiles in the NDPluginStats plugin
epicsEnvSet("XSIZE",  "2448")

### The maximim image height; used for column profiles in the NDPluginStats plugin
epicsEnvSet("YSIZE",  "2048")

### The maximum number of time series points in the NDPluginStats plugin
epicsEnvSet("NCHANS", "2048")

### The maximum number of frames buffered in the NDPluginCircularBuff plugin
epicsEnvSet("CBUFFS", "500")

### The search path for database files
# epicsEnvSet("EPICS_DB_INCLUDE_PATH", "$(ADCORE)/db;$(ADGENICAM)/db;$(ADSPINNAKER)/db")

epicsEnvSet("NELEMENTS", "12592912")

#########################   camera  ##########################################################################################
## ADSpinnakerConfig(const char *portName, const char *cameraId, int traceMask, int memoryChannel,
##                  size_t maxMemory, int priority, int stackSize)

ADSpinnakerConfig("$(PORT)", "$(CAMERA_ID)", 0x1, 0)

asynSetTraceIOMask($(PORT), 0, 2)

dbLoadRecords("$(ADSpinnaker_DB)/spinnaker.db", "P=$(PREFIX_PV),R=cam1:,PORT=$(PORT)")

# Load the autogenerated file of GenICam features
#dbLoadRecords("$(GENICAM_DB_FILE)", "P=$(PREFIX),R=cam1:,PORT=$(PORT)")


# Transport diagnostics
#dbLoadRecords("$(ADSPINNAKER)/db/spinnakerIntReadback.template", "P=$(PREFIX),R=cam1:,PORT=$(PORT),PROP=TransmitFailureCount,PN=SP_TRANSMIT_FAILURE_COUNT")
#dbLoadRecords("$(ADSPINNAKER)/db/spinnakerIntReadback.template", "P=$(PREFIX),R=cam1:,PORT=$(PORT),PROP=BufferUnderrunCount, PN=SP_BUFFER_UNDERRUN_COUNT")
#dbLoadRecords("$(ADSPINNAKER)/db/spinnakerIntReadback.template", "P=$(PREFIX),R=cam1:,PORT=$(PORT),PROP=FailedBufferCount,   PN=SP_FAILED_BUFFER_COUNT")
#dbLoadRecords("$(ADSPINNAKER)/db/spinnakerIntReadback.template", "P=$(PREFIX),R=cam1:,PORT=$(PORT),PROP=FailedPacketCount,   PN=SP_FAILED_PACKET_COUNT")


# # Create a standard arrays plugin
# NDStdArraysConfigure("Image1", 5, 0, "$(PORT)", 0, 0)
# # Use this line for 8-bit data only
# #dbLoadRecords("$(ADCORE)/db/NDStdArrays.template", "P=$(PREFIX),R=image1:,PORT=Image1,ADDR=0,TIMEOUT=1,NDARRAY_PORT=$(PORT),TYPE=Int8,FTVL=CHAR,NELEMENTS=$(NELEMENTS)")
# # Use this line for 8-bit or 16-bit data
# dbLoadRecords("$(ADCORE)/db/NDStdArrays.template", "P=$(PREFIX),R=image1:,PORT=Image1,ADDR=0,TIMEOUT=1,NDARRAY_PORT=$(PORT),TYPE=Int16,FTVL=SHORT,NELEMENTS=$(NELEMENTS)")


# Load all other plugins using commonPlugins.cmd
#< $(ADCORE)/iocBoot/commonPlugins.cmd
#set_requestfile_path("$(ADGENICAM)/GenICamApp/Db")
#set_requestfile_path("$(ADSPINNAKER)/spinnakerApp/Db")


#iocshLoad("$(autosave_DIR)/autosave.iocsh")
#iocshLoad("$(iocStats_DIR)/iocStats.iocsh")

iocInit()
 
# save things every thirty seconds
#create_monitor_set("auto_settings.req", 30,"P=$(PREFIX)")

# Wait for enum callbacks to complete
epicsThreadSleep(1.0)

# Wait for callbacks on the property limits (DRVL, DRVH) to complete
epicsThreadSleep(1.0)

